1)	Chapter 1. Introduction to OpenGL
Assignment:
a)	Read Chapter 1.
b)	Pick a development environment and target platform (target should preferably support OpenGL 3.x or greater, otherwise, OpenGL ES 2.0 or greater).  My work laptop supports OpenGL 3.2.  If you’ve got a bleeding edge graphics card at home, the latest chipsets support 4.3.
c)	Compile and run the triangles.cpp example from the first chapter.  I’ve thrown together a poor man’s version of “LoadShaders.h” (https://gist.github.com/4477235).  If you update it to actually read the shaders from a file, feel free fork and ping me with a pull request.  Otherwise, you can just email it to the group.  You can also see my entire shoddy implementation here:  https://github.com/kaizenfeedbackloop/CrashCourseInOGL.  Right now, it only compiles on OS X though.
//////////////////////////////////////////////////////////////////////
//
//  triangles.cpp
//
//////////////////////////////////////////////////////////////////////

#include <iostream>
using namespace std;

#include "vgl.h"
#include "LoadShaders.h"

enum VAO_IDs { Triangles, NumVAOs };
enum Buffer_IDs { ArrayBuffer, NumBuffers };
enum Attrib_IDs { vPosition = 0 };

GLuint  VAOs[NumVAOs];
GLuint  Buffers[NumBuffers];

const GLuint  NumVertices = 6;

//--------------------------------------------------------------------
//
// init
//

void 
init(void)
{
    glGenVertexArrays(NumVAOs, VAOs);
    glBindVertexArray(VAOs[Triangles]);

    GLfloat  vertices[NumVertices][2] = {
        { -0.90, -0.90 },  // Triangle 1
        {  0.85, -0.90 },
        { -0.90,  0.85 },
        {  0.90, -0.85 },  // Triangle 2
        {  0.90,  0.90 },
        { -0.85,  0.90 }
    };

    glGenBuffers(NumBuffers, Buffers);
    glBindBuffer(GL_ARRAY_BUFFER, Buffers[ArrayBuffer]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices),
                 vertices, GL_STATIC_DRAW);

    ShaderInfo  shaders[] = {
        { GL_VERTEX_SHADER, "triangles.vert" },
        { GL_FRAGMENT_SHADER, "triangles.frag" },
        { GL_NONE, NULL }
    };

    GLuint program = LoadShaders(shaders);
    glUseProgram(program);

    glVertexAttribPointer(vPosition, 2, GL_FLOAT,
                          GL_FALSE, 0, BUFFER_OFFSET(0));
    glEnableVertexAttribArray(vPosition);
}

//--------------------------------------------------------------------
//
// display
//

void 
display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);

    glBindVertexArray(VAOs[Triangles]);
    glDrawArrays(GL_TRIANGLES, 0, NumVertices);

    glFlush();
}

//--------------------------------------------------------------------
//
// main
//

int 
main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGBA);
    glutInitWindowSize(512, 512);
    glutInitContextVersion(4, 3);
    glutInitContextProfile(GLUT_CORE_PROFILE);
    glutCreateWindow(argv[0]);

    if (glewInit()) {
        cerr << "Unable to initialize GLEW ... exiting" << endl;
        exit(EXIT_FAILURE);
    }

    init();

    glutDisplayFunc(display);

    glutMainLoop();
}
d)	Rotate the triangles 90° so the black line separating the triangles starts from the bottom left and goes to the top right.
e)	Come ready to describe and describe the OpenGL rendering pipeline.
